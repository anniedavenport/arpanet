#!/bin/bash

readonly IMAGE="binocarlos/arpanet"

# change these back to progrium/ once builds are current there
readonly AMBASSADORD_IMAGE="binocarlos/ambassadord"
readonly REGISTRATOR_IMAGE="binocarlos/registrator"

readonly ETCD_IMAGE="coreos/etcd"
readonly ETCDCTL_IMAGE="binocarlos/etcdctl"
readonly SMESH_IMAGE="binocarlos/smesh"

source ~/.arpanetrc
export DOCKER_URL=${DOCKER_URL:="https://get.docker.io/ubuntu/"}
export DOCKER_PORT=${DOCKER_PORT:=2375}
export ARPANET_ETCD_PORT=${ARPANET_ETCD_PORT:=4001}
export ARPANET_ETCD_PEERPORT=${ARPANET_ETCD_PEERPORT:=7001}
export ARPANET_ETCD_PATH=${ARPANET_ETCD_PATH:="/arpanet"}

# INSTALL
check-environment(){
	if [ -z $HOSTNAME ]; then
		echo "HOSTNAME variable needed"
		exit 1
	fi
	if [ -z $ARPANET_IP ]; then
		echo "ARPANET_IP variable needed"
		exit 1
	fi
	if [ -z $ARPANET_MASTERS ]; then
		echo "ARPANET_MASTERS variable needed"
		exit 1
	fi
	if [ -z $ARPANET_ETCD ]; then
		IFS=',' read -a masters <<< "$VIKING_MASTERS"
		VIKING_ETCD="${masters[0]}:$VIKING_ETCD_PORT"
	fi
}

docker-environment(){
	echo "-e VIKING_IP=$VIKING_IP -e VIKING_ETCD=$VIKING_ETCD -e VIKING_MASTERS=$VIKING_MASTERS -e VIKING_MASTER_PORT=$VIKING_MASTER_PORT -e DOCKER_PORT=$DOCKER_PORT -e VIKING_ETCD_PATH=$VIKING_ETCD_PATH"
}

install-docker(){
	curl -sSL $DOCKER_URL | sudo sh
	sysctl -w net.ipv4.ip_forward=1
	echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://$VIKING_IP:$DOCKER_PORT'" > /etc/default/docker
	service docker restart
	sleep 2
}

install-core() {	
	install-docker
}

install-slave() {
	docker pull $AMBASSADORD_IMAGE
	docker pull $REGISTRATOR_IMAGE
}

install-master() {
	docker pull $ETCD_IMAGE
	docker pull $SMESH_IMAGE
}

cmd-install() {
	check-environment
	case "$1" in	
	core)               shift; install-core $@;;
	slave)              shift; install-slave $@;;
	master)             shift; install-master $@;;
  *)
		echo "usage: viking install <mode>"
	;;
	esac
}

start-registrator(){

	running=$(docker ps | grep registrator)
	if [ -n "$running" ]; then
		echo "arpanet registrator is already running"
		exit 1
	fi

	docker run -d \
		--name registrator \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$ARPANET_IP etcd://$ARPANET_ETCD:$ARPANET_ETCD_PORT$ARPANET_ETCD_PATH/network
}

start-ambassadord(){

	running=$(docker ps | grep backends)
	if [ -n "$running" ]; then
		echo "arpanet ambassadord is already running"
		exit 1
	fi

	docker run -d \
		--name backends \
		-v /var/run/docker.sock:/var/run/docker.sock \
		$AMBASSADORD_IMAGE --omnimode

	docker run --rm \
		--privileged \
		--net container:backends \
		$AMBASSADORD_IMAGE --setup-iptables

}

slave-start() {
	start-registrator
	start-ambassadord
}

slave-stop() {
	docker stop registrator && docker rm registrator	
	docker stop backends && docker rm backends
}

cmd-slave() {
	check-environment
	case "$1" in
	start)              shift; slave-start $@;;
	stop)               shift; slave-stop $@;;
  *)
		echo "usage: arpanet slave (start|stop)"
	;;
	esac
}

etcd-start() {
	if [ -z "$1" ]; then
		echo "usage: arpanet master start --peers | --token [OPTIONS}"
		exit 1
	fi
	running=$(docker ps | grep arpanetetcd)
	if [ -n "$running" ]; then
		echo "arpanet etcd is already running"
		exit 1
	fi
	$(docker run --rm binocarlos/smesh start --name arpanetetcd --hostname $HOSTNAME --address $ARPANET_IP --port $ARPANET_ETCD_PORT --peerport $ARPANET_ETCD_PEERPORT --dockerargs="-e SERVICE_NAME=arpanetetcd" $@)
}

etcd-stop() {
	docker stop arpanetetcd && docker rm arpanetetcd	
}

master-start() {
	etcd-start $@
}

master-stop() {
	etcd-stop $@
}

cmd-master() {
	check-environment
	case "$1" in	
	start)              shift; master-start $@;;
	stop)               shift; master-stop $@;;
  *)
		echo "usage: arpanet master (start|stop)"
	;;
	esac
}

cmd-etcdctl() {
	check-environment
	docker run --rm -ti $ETCDCTL_IMAGE --peers $ARPANET_IP:$ARPANET_ETCD_PORT $@
}

cmd-help() {
echo <<EOF
Usage: arpanet COMMAND [options]

Commands:

  install    (master|slave)             Install master or slave components
  master     (start|stop)               Start|Stop the master
  slave      (start|stop)               Start|Stop the slave
  etcdctl                               Run etcdctl against the local master
EOF
}

main() {
	case "$1" in
	install)            shift; cmd-install $@;;
	master)             shift; cmd-master $@;;
	slave)              shift; cmd-slave $@;;
	etcdctl)            shift; cmd-etcdctl $@;;
	*)                  cmd-help $@;;
	esac
}

main "$@"